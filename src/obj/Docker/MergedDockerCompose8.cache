services:
  basket.api:
    build:
      context: C:\Users\majaham\source\repos\AspnetMicroservices\src
      dockerfile: C:\Users\majaham\source\repos\AspnetMicroservices\src\Services\Basket\Basket.API\Dockerfile
    container_name: basket.api
    depends_on:
      basketdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      CacheSettings:ConnectionString: basketdb:6379
    image: basketapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: 8001
      protocol: tcp
  basketdb:
    container_name: basketdb
    image: redis
    networks:
      default: null
    ports:
    - mode: ingress
      target: 6379
      published: 6379
      protocol: tcp
    restart: always
  catalog.api:
    build:
      context: C:\Users\majaham\source\repos\AspnetMicroservices\src
      dockerfile: C:\Users\majaham\source\repos\AspnetMicroservices\src\Services\Catalog\Catalog.API\Dockerfile
    container_name: catalog.api
    depends_on:
      catalogdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings:ConnectionString: mongodb://catalogdb:27017
    image: catalogapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: 8000
      protocol: tcp
  catalogdb:
    container_name: catalogdb
    image: mongo
    networks:
      default: null
    ports:
    - mode: ingress
      target: 27017
      published: 27017
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: catalog_data
      target: /data/db
      volume: {}
  discountdb:
    container_name: discountdb
    environment:
      POSTGRES_PASSWORD: password
    image: postgres
    networks:
      default: null
    ports:
    - mode: ingress
      target: 5423
      published: 5432
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: postgres_data
      target: /data/db
      volume: {}
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    networks:
      default: null
    ports:
    - mode: ingress
      target: 8000
      published: 8080
      protocol: tcp
    - mode: ingress
      target: 9000
      published: 9000
      protocol: tcp
    restart: always
    volumes:
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
      bind:
        create_host_path: true
    - type: volume
      source: portainer_data
      target: /data
      volume: {}
networks:
  default:
    name: dockercompose9908039451063707622_default
volumes:
  catalog_data:
    name: dockercompose9908039451063707622_catalog_data
  portainer_data:
    name: dockercompose9908039451063707622_portainer_data
  postgres_data:
    name: dockercompose9908039451063707622_postgres_data